{
    "type": "SavedSearchWithScheduleSyncDefinition",
    "name": "siem_metrics scheduled search",
    "search": {
        "queryText": "// Schedule a version of this search to save to the lookup every 15m for -15m \n// It will converge to a create a single view with the most recent status and key fields per insightid.\n\n(_index=sumologic_audit_events _sourcecategory=cseinsight insightupdated\nOR\n_index=sumologic_system_events _sourcecategory=cseinsight insightcreated)\n\n| json field=_raw \"insight.created\" as created nodrop\n| json field=_raw \"eventName\" nodrop\n| json field=_raw \"insightIdentity.id\" as id\n| json field=_raw \"insightIdentity.readableId\" as insightid\n| json field=_raw \"insight.status\" as status nodrop\n| json field=_raw \"insight.entityType\" as entitytype nodrop\n| json field=_raw \"insight.entityValue\" as entityvalue nodrop\n| json field=_raw \"insight.tags\" as tags nodrop\n| json field=_raw \"insight.severity\" as severity nodrop\n| json field=_raw \"insight.confidence\" as confidence nodrop\n| json field=_raw \"insight.signals\" as signals nodrop\n| json field=_raw \"insight.riskScore\" as riskscore nodrop\n| json field=_raw \"insight.severityName\" as severityname nodrop\n\n// in closed events\n| json field=_raw \"insight.assignee\" as assignee nodrop\n| json field=_raw \"insight.resolution\" as resolution nodrop\n\n// may exist after an update\n| json field=_raw \"insight.timeToResponse\" as timeToResponse nodrop\n| json field=_raw \"insight.timeToDetection\" as timeToDetection nodrop\n| json field=_raw \"insight.timeToRemediation\" as timeToRemediation nodrop\n\n| if (isnull(timeToResponse),-1,timeToResponse) as timeToResponse\n| if (isnull(timeToDetection),-1,timeToDetection) as timeToDetection\n| if (isnull(timeToRemediation),-1,timeToRemediation) as timeToRemediation\n\n//  flag if there is a status change event, if so record status_change_time and is_assigned_time\n| if(status=\"new\",9999999999999,_messagetime) as status_change_time\n| if(isempty(assignee),9999999999999,_messagetime) as is_assigned_time\n\n// aggregate per insight event, but each insight can have many events\n| count as events, min(_messagetime) as _messagetime by id,insightid,eventname,status,assignee,resolution,timeToResponse,timeToDetection,timeToRemediation,status_change_time,is_assigned_time,created,tags,severity,confidence,severityname, riskscore, entitytype, entityvalue\n\n// converge to the most recent result only per insightid\n| sort _messagetime \n\n// for status_change_time and is_assigned_time the lowest value under 9999999999999 is the actual correct one to use. (I.e. the first one)\n| min(status_change_time) as status_change_time, min(is_assigned_time) as is_assigned_time, \n   first(status) as status, first(resolution) as resolution,first(tags) as tags, first(severity) as severity,\n   first(confidence) as confidence, max(timetodetection) as timetodetection,max(timetoremediation) as timetoremediation,\n   first(severityname) as severityname, first(riskscore) as riskscore, first(entityvalue) as entityvalue,\n   max(timetoresponse) as old_ttr,first(assignee) as assignee by insightid,created\n\n// This code records the actual true TTRes since automations touching insight corrupt it\n// measure time from creation to the first status change we find after that.\n| parsedate(created,\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\") as createdtime\n\n// ignore where both times are not set yet as no response\n| floor(timetodetection) as timetodetection | ceil(timetoremediation) as timetoremediation\n| if(status_change_time < 9999999999999,status_change_time,is_assigned_time) as true_response_time\n| floor((true_response_time - createdtime) / (1000)) as timetoresponse\n\n// these have no response yet\n| if (status_change_time = 9999999999999 and is_assigned_time = 9999999999999,-1,timetoresponse) as timetoresponse\n\n// debug only\n| formatdate(tolong(createdtime),\"yyyy-MM-dd HH:mm:sssZZZ\",\"ETC/Utc\") as created\n| formatdate(tolong(true_response_time),\"yyyy-MM-dd HH:mm:sssZZZ\",\"ETC/Utc\") as responded\n\n//| fields -true_response_time,created, responded, olt_ttr\n\n| if(status_change_time = 9999999999999,-1,status_change_time) as timestatuschanged\n| if(is_assigned_time = 9999999999999,-1, is_assigned_time) as timeassigned\n\n| fields insightid,status,resolution,createdtime,timestatuschanged, timeassigned, \n  timetodetection, timetoresponse, timetoremediation, assignee, \n  riskscore, severity, severityname, entityvalue, confidence, tags\n\n| tolong(createdtime) as createdtime\n| tolong(timestatuschanged) as timestatuschanged\n| tolong(timetodetection) as timetodetection\n| tolong(timetoresponse) as timetoresponse\n| tolong(timetoremediation) as timetoremediation\n| tolong(timeassigned) as timeassigned\n| toint(riskscore) as riskscore\n| toint(severity) as severity\n| if(isnull(confidence),-1,confidence) as confidence\n| todouble(confidence) as confidence\n\n| save append path://\"/Library/Users/some.user@sumologic.com/looukps/siem_metrics\"\n",
        "byReceiptTime": false,
        "viewName": "",
        "viewStartTime": "1970-01-01T00:00:00Z",
        "queryParameters": [],
        "parsingMode": "Manual",
        "defaultTimeRange": "Last 24 Hours"
    },
    "searchSchedule": {
        "cronExpression": "0 0/15 * * * ? *",
        "displayableTimeRange": "Last 15 Minutes",
        "parseableTimeRange": {
            "type": "BeginBoundedTimeRange",
            "from": {
                "type": "RelativeTimeRangeBoundary",
                "relativeTime": "-15m"
            },
            "to": null
        },
        "timeZone": "Etc/UTC",
        "threshold": {
            "thresholdType": null,
            "operator": "lt",
            "count": 0
        },
        "notification": {
            "taskType": "EmailSearchNotificationSyncDefinition",
            "toList": [
                "some.user@sumologic.com"
            ],
            "subjectTemplate": "Search Alert",
            "includeQuery": false,
            "includeResultSet": false,
            "includeHistogram": false,
            "includeCsvAttachment": false
        },
        "scheduleType": "15Minutes",
        "muteErrorEmails": true,
        "parameters": []
    },
    "description": "siem_metrics scheduled search to backfill data"
}